{"version":3,"sources":["frame_stacker.css"],"names":[],"mappings":"AAAA,wBACC,aAAc,CAed,cAAe,CACf,KAAM,CACN,MAAO,CACP,WAAY,CACZ,UACD,CAsBA,wDACC,mBACD,CACA,+BACC,mBACD","file":"frame_stacker.css","sourceRoot":"../src","sourcesContent":["frame-stacker-container {\n\tdisplay: block;\n\n\t/*\n\t\tNote - position fixed is well supported, but still doesn't work on opera mini. If you want to support that, then you'll have to set position to absolute, and either:\n\t\t\tuse a scroll listener to maintain the correct \"top\" value\n\n\t\t\tuse something like tether.js to tether the layer to viewport\n\n\t\t\tnest an inner scrolling container inside of the body element, and set html, body {height: 100%;}  \n\n\t\t\tTODO - should we provide support for opera-mini directly?\n\t\t\tIf \"position: fixed\" not supported, then use absolute, and add our own scroll listener\n\n\t\thttps://caniuse.com/#feat=css-fixed\n\t*/\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\theight: 100%;\n\twidth: 100%;\n}\n\n/*\n\tWhen there are any iframe layers open, frame-stacker-container should capture all mouse clicks that don't land on an iframe.\n\n\tWhen there are no iframes open, clicks should pass through.\n\tIMPORTANT - there can be no whitespace inside the element, or it will never match :empty\n\n\tIt would be nice to remove the container entirely when it's empty, but currently we don't actually know when this happens. When we call remove() on the last layer, it is allowed to animate the frame out (and we don't ask it to tell us when it's done).\n*/\nframe-stacker-container:empty {\n\tpointer-events: none;\n}\n\n/*\n\tplugins may decide to wrap iframe in other elements, and those may extend beyond the iframe. If so, clicks on those wrapper elements should fall through - they should not be interactive in any way.\n\t\n\tWhen any iframe layers are open, all clicks should either land on one of the iframes or on the frame-stacker-container. This way we can be sure to handle all click events, and know which layer the user intended to click on.\n\n\tExplanation:\n\tSuppose one large alert-style window is open(with exit_on_external_click=True), and then it pushes another smaller layer (also with exit_on_external_click=True). If the user now clicks outside the small window on the larger, bottom window, then we should close the small window and re-focus the larger one. However, if the small window adds a full-page wrapper element around itself (ie. for positioning), and if that element captures click events, then we wouldn't be able to tell that the aforementioned click was actually on the first iframe. All clicks would either fire on the top iframe or its wrapper element, so there would be no way to distinguish between clicks on the bottom iframe vs clicks on the base document. \n*/\nframe-stacker-container > * {\n\tpointer-events: none;\n}\nframe-stacker-container iframe {\n\tpointer-events: auto;\n}"]}